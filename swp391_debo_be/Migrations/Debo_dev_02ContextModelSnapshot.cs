// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using swp391_debo_be.Models;

#nullable disable

namespace swp391_debo_be.Migrations
{
    [DbContext(typeof(Debo_dev_02Context))]
    partial class Debo_dev_02ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DentistMajor", b =>
                {
                    b.Property<Guid>("DentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Dent_ID");

                    b.Property<int>("TreatId")
                        .HasColumnType("int")
                        .HasColumnName("Treat_ID");

                    b.HasKey("DentId", "TreatId")
                        .HasName("PK__Dentist___7EA26274A7A5F0FE");

                    b.HasIndex("TreatId");

                    b.ToTable("Dentist_Major", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Book_ID");

                    b.Property<int?>("CusRecId")
                        .HasColumnType("int")
                        .HasColumnName("Cus_Rec_ID");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("EstDuration")
                        .HasColumnType("int")
                        .HasColumnName("Est_Duration");

                    b.Property<Guid?>("TempDent")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Temp_Dent");

                    b.Property<int?>("TreatId")
                        .HasColumnType("int")
                        .HasColumnName("Treat_ID");

                    b.HasKey("Id")
                        .HasName("PK__Appointm__3214EC2741C62A16");

                    b.HasIndex("BookId");

                    b.HasIndex("CusRecId");

                    b.HasIndex("TempDent");

                    b.HasIndex("TreatId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("Created_Date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Creator_ID");

                    b.Property<Guid?>("CusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Cus_ID");

                    b.Property<Guid?>("DenId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Den_ID");

                    b.Property<bool?>("IsCreatedByStaff")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Created_By_Staff");

                    b.Property<string>("MedRec")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Med_Rec");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Payment_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Booking__3214EC27E7A736E0");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CusId");

                    b.HasIndex("DenId");

                    b.HasIndex(new[] { "PaymentId" }, "UQ__Booking__DA6C7FE003D3E611")
                        .IsUnique()
                        .HasFilter("[Payment_ID] IS NOT NULL");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.ClinicBranch", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Admin_ID");

                    b.Property<Guid?>("MngId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Mng_ID");

                    b.HasKey("Id")
                        .HasName("PK__Clinic_B__3214EC2754B82300");

                    b.HasIndex("AdminId");

                    b.ToTable("Clinic_Branch", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.ClinicTreatment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Admin_ID");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__Clinic_T__3214EC27D3BB3E55");

                    b.HasIndex("AdminId");

                    b.HasIndex("Category");

                    b.ToTable("Clinic_Treatment", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.CustomerRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<Guid?>("CusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Cus_ID");

                    b.Property<Guid?>("DentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Dent_ID");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3214EC279115F950");

                    b.HasIndex("CusId");

                    b.HasIndex("DentId");

                    b.ToTable("Customer_Record", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("MngId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Mng_ID");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Employee__3214EC27B38DD1FA");

                    b.HasIndex("MngId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<Guid?>("CusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Cus_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("TreatId")
                        .HasColumnType("int")
                        .HasColumnName("Treat_ID");

                    b.HasKey("Id")
                        .HasName("PK__Feedback__3214EC2719078489");

                    b.HasIndex("CusId");

                    b.HasIndex("TreatId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<int?>("BrId")
                        .HasColumnType("int")
                        .HasColumnName("Br_ID");

                    b.HasKey("Id")
                        .HasName("PK__Manager__3214EC27A5342A08");

                    b.HasIndex(new[] { "BrId" }, "UQ_Manager_Br_ID")
                        .IsUnique()
                        .HasFilter("[Br_ID] IS NOT NULL");

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("CusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Cus_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("MethodId")
                        .HasColumnType("int")
                        .HasColumnName("Method_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Payment__3214EC2741530AD8");

                    b.HasIndex("CusId");

                    b.HasIndex("MethodId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("IpnListenerLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ipn_Listener_Link");

                    b.Property<string>("PaymentInfo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Payment_Info");

                    b.Property<string>("PrivateKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Private_Key");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("Provider_ID");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Public_Key");

                    b.HasKey("Id")
                        .HasName("PK__Payment___3214EC27A63F48AB");

                    b.ToTable("Payment_Method", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Role");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__D80AB49B9D6A0592");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.TreatmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Treatmen__3214EC270769FCB0");

                    b.ToTable("Treatment_Category", (string)null);
                });

            modelBuilder.Entity("swp391_debo_be.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateOfBirthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date Of Birthday");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC2717C4EBC6");

                    b.HasIndex("Role");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DentistMajor", b =>
                {
                    b.HasOne("swp391_debo_be.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("DentId")
                        .IsRequired()
                        .HasConstraintName("FK_Dentist_Major_Dent_ID");

                    b.HasOne("swp391_debo_be.Models.ClinicTreatment", null)
                        .WithMany()
                        .HasForeignKey("TreatId")
                        .IsRequired()
                        .HasConstraintName("FK_Dentist_Major_Treat_ID");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Appointment", b =>
                {
                    b.HasOne("swp391_debo_be.Models.Booking", "Book")
                        .WithMany("Appointments")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_Appointment_Book_ID");

                    b.HasOne("swp391_debo_be.Models.CustomerRecord", "CusRec")
                        .WithMany("Appointments")
                        .HasForeignKey("CusRecId")
                        .HasConstraintName("FK__Appointme__Cus_R__52593CB8");

                    b.HasOne("swp391_debo_be.Models.User", "TempDentNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("TempDent")
                        .HasConstraintName("FK_Appointment_Temp_Dent");

                    b.HasOne("swp391_debo_be.Models.ClinicTreatment", "Treat")
                        .WithMany("Appointments")
                        .HasForeignKey("TreatId")
                        .HasConstraintName("FK_Appointment_Treat_ID");

                    b.Navigation("Book");

                    b.Navigation("CusRec");

                    b.Navigation("TempDentNavigation");

                    b.Navigation("Treat");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Booking", b =>
                {
                    b.HasOne("swp391_debo_be.Models.User", "Creator")
                        .WithMany("BookingCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Booking_Creator_ID");

                    b.HasOne("swp391_debo_be.Models.User", "Cus")
                        .WithMany("BookingCus")
                        .HasForeignKey("CusId")
                        .HasConstraintName("FK_Booking_Cus_ID");

                    b.HasOne("swp391_debo_be.Models.Employee", "Den")
                        .WithMany("Bookings")
                        .HasForeignKey("DenId")
                        .HasConstraintName("FK_Booking_Den_ID");

                    b.HasOne("swp391_debo_be.Models.Payment", "Payment")
                        .WithOne("Booking")
                        .HasForeignKey("swp391_debo_be.Models.Booking", "PaymentId")
                        .HasConstraintName("FK_Booking_Payment_ID");

                    b.Navigation("Creator");

                    b.Navigation("Cus");

                    b.Navigation("Den");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("swp391_debo_be.Models.ClinicBranch", b =>
                {
                    b.HasOne("swp391_debo_be.Models.User", "Admin")
                        .WithMany("ClinicBranches")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK_Clinic_Branch_Admin_ID");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("swp391_debo_be.Models.ClinicTreatment", b =>
                {
                    b.HasOne("swp391_debo_be.Models.User", "Admin")
                        .WithMany("ClinicTreatments")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK_Clinic_Treatment_Admin_ID");

                    b.HasOne("swp391_debo_be.Models.TreatmentCategory", "CategoryNavigation")
                        .WithMany("ClinicTreatments")
                        .HasForeignKey("Category")
                        .HasConstraintName("FK_Clinic_Treatment_Category");

                    b.Navigation("Admin");

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("swp391_debo_be.Models.CustomerRecord", b =>
                {
                    b.HasOne("swp391_debo_be.Models.User", "Cus")
                        .WithMany("CustomerRecords")
                        .HasForeignKey("CusId")
                        .HasConstraintName("FK_Customer_Record_Cus_ID");

                    b.HasOne("swp391_debo_be.Models.Employee", "Dent")
                        .WithMany("CustomerRecords")
                        .HasForeignKey("DentId")
                        .HasConstraintName("FK_Customer_Record_Dent_ID");

                    b.Navigation("Cus");

                    b.Navigation("Dent");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Employee", b =>
                {
                    b.HasOne("swp391_debo_be.Models.Manager", "Mng")
                        .WithMany("Employees")
                        .HasForeignKey("MngId")
                        .HasConstraintName("FK_Employee_Mng_ID");

                    b.Navigation("Mng");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Feedback", b =>
                {
                    b.HasOne("swp391_debo_be.Models.User", "Cus")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CusId")
                        .HasConstraintName("FK_Feedback_Cus_ID");

                    b.HasOne("swp391_debo_be.Models.ClinicTreatment", "Treat")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TreatId")
                        .HasConstraintName("FK_Feedback_Treat_ID");

                    b.Navigation("Cus");

                    b.Navigation("Treat");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Manager", b =>
                {
                    b.HasOne("swp391_debo_be.Models.ClinicBranch", "Br")
                        .WithOne("Manager")
                        .HasForeignKey("swp391_debo_be.Models.Manager", "BrId")
                        .HasConstraintName("FK_Manager_Br_ID_Clinic_Branch_ID");

                    b.Navigation("Br");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Payment", b =>
                {
                    b.HasOne("swp391_debo_be.Models.User", "Cus")
                        .WithMany("Payments")
                        .HasForeignKey("CusId")
                        .HasConstraintName("FK_Payment_Cus_ID");

                    b.HasOne("swp391_debo_be.Models.PaymentMethod", "Method")
                        .WithMany("Payments")
                        .HasForeignKey("MethodId")
                        .HasConstraintName("FK_Payment_Method_ID");

                    b.Navigation("Cus");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("swp391_debo_be.Models.User", b =>
                {
                    b.HasOne("swp391_debo_be.Models.Role", "RoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Booking", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("swp391_debo_be.Models.ClinicBranch", b =>
                {
                    b.Navigation("Manager");
                });

            modelBuilder.Entity("swp391_debo_be.Models.ClinicTreatment", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("swp391_debo_be.Models.CustomerRecord", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Employee", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CustomerRecords");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Manager", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Payment", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("swp391_debo_be.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("swp391_debo_be.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("swp391_debo_be.Models.TreatmentCategory", b =>
                {
                    b.Navigation("ClinicTreatments");
                });

            modelBuilder.Entity("swp391_debo_be.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BookingCreators");

                    b.Navigation("BookingCus");

                    b.Navigation("ClinicBranches");

                    b.Navigation("ClinicTreatments");

                    b.Navigation("CustomerRecords");

                    b.Navigation("Feedbacks");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
